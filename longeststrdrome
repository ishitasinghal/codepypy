Problem Statement

Given a string S, find the longest palindromic substring in S. 
Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string which reads the same backwards. 
More formally, S is palindrome if reverse(S) = S. 
Incase of conflict, return the substring which occurs first ( with the least starting index ).

Input:
The first line of input consists number of the testcases. The following T lines consist of a string each.

Output:
In each separate line print the longest palindrome of the string given in the respective test case.

Example:
Input:
1
aaaabbaa

Output:
aabbaa

#CODE

tc = int(input())
for j in range(tc):
    string = input()
    list1 = [ string[i:j] for i in range(len(string)) for j in range(i+1, len(string)+1)]
    list2 = []
    for i in list1:
        if(i[0:]==i[::-1]):
            list2.append(i)
    print(max(list2, key=len))

Problem Statement
Given two sequences, find the length of longest subsequence 
present in both of them. Both the strings are of uppercase.

Input:
First line of the input contains no of test cases  T,the T 
test cases follow.
Each test case consist of 2 space separated integers A and B 
denoting the size of string str1 and str2 respectively
The next two lines contains the 2 string str1 and str2 .

Output:
For each test case print the length of longest  common subsequence 
of the two strings.

Example:
Input:
2
6 6
ABCDGH
AEDFHR
3 2
ABC
AC

Output:
3
2

#CODE
#final code for given number of testcases

testcases = input()
for _ in range(int(testcases)):
    l1, l2 = input().split()
    string1 = input()
    string2 = input()
    list1 = []
    for i in string1:
        if(i in string2):
            list1.append(string2.index(i))
    list2 = list1[:]
    list1.sort()
    if(list1==list2):
        print(len(set(list1)))
    
    ##Using dynamic problem##
    
    def lcs(s1,s2):
    l1=len(s1)
    l2=len(s2)
    l = [[None]*(l2+1) for i in range(l1+1)] 
    for i in range(l1+1):
        for j in range(l2+1):
            if i==0 or j==0:
                l[i][j]=0
            elif s1[i-1]==s2[j-1]:
                l[i][j]=l[i-1][j-1]+1
            else:
                l[i][j]=max(l[i-1][j],l[i][j-1])
    return l[l1][l2]
if __name__ == '__main__':
   
    for _ in range(int(input())) :
        n,m=(int(i) for i in input().split())
        s1=input()
        s2=input()
        print(lcs(s1,s2))
